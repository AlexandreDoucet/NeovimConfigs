return {
	{
		"MeanderingProgrammer/render-markdown.nvim",
		dependencies = {
			"nvim-treesitter/nvim-treesitter",
			"echasnovski/mini.nvim", -- correct dependency
		},
		config = function()
			require("render-markdown").setup({
				bullet = {
					enabled = true,

					icons = function(level)
						local symbols = { "●", "○", "◆", "◇" }
						return symbols[(level - 1) % #symbols + 1]
					end,

					ordered_icons = function(level, index, value)
						if not value or value == "" then
							return string.format("%d.", index)
						end

						value = vim.trim(value)
						local num = tonumber(value:sub(1, #value - 1))

						if num then
							return string.format("%d.", num > 1 and num or index)
						else
							return string.format("%d.", index)
						end
					end,
					left_pad = 0,
					right_pad = 0,
					highlight = "RenderMarkdownBullet",
				},
				checkbox = {
					enabled = true,
					position = "inline",
					unchecked = {
						icon = "󰄱 ",
						highlight = "RenderMarkdownUnchecked",
					},
					checked = {
						icon = "󰱒 ",
						highlight = "RenderMarkdownChecked",
					},
					custom = {
						todo = {
							raw = "[-]",
							rendered = "󰥔 ",
							highlight = "RenderMarkdownTodo",
						},
					},
				},
			})

			-- custom function to toggle checkbox state
			local function insert_checkbox()
				local line = vim.api.nvim_get_current_line()

				-- match -, *, +, or your fancy bullets before [ ]
				if line:match("^%s*[%-%*+●○◆◇]%s%[.*%]") then
					local new_line = line
					if line:match("^%s*[%-%*+●○◆◇]%s%[%s*]") then
						new_line = line:gsub("%[%s*%]", "[x]") -- unchecked -> checked
					elseif line:match("%[.*]") then
						new_line = line:gsub("%[%s*x%s*%]", "[ ]") -- checked -> unchecked
					end
					vim.api.nvim_set_current_line(new_line)
				else
					-- if no checkbox, prepend with a dash
					vim.api.nvim_set_current_line("- [ ] " .. line)
				end
			end

			-- keymap to toggle checkboxes
			vim.keymap.set("n", "<leader>cb", insert_checkbox, { noremap = true, silent = true })
		end,
	},
}
