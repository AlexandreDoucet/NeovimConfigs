--return {
--	{
--		"neovim/nvim-lspconfig",
--		dependencies = {
--			"williamboman/mason.nvim",
--			"williamboman/mason-lspconfig.nvim", -- Make sure this is listed here as a dependency
--			"saghen/blink.cmp",
--		},
--		enabled = true,
--		lazy = false,
--		config = function()
--			local mason = require("mason")
--			local mason_lspconfig = require("mason-lspconfig")
--			local lspconfig = require("lspconfig")
--			local capabilities = require("blink.cmp").get_lsp_capabilities()
--
--			-- Set up Mason
--			mason.setup()
--			mason_lspconfig.setup({
--				automatic_installation = true, -- Automatically install LSPs
--			})
--
--			-- Set up global diagnostics configuration
--			vim.diagnostic.config({
--				virtual_text = false,
--				signs = true,
--				underline = true,
--				update_in_insert = false,
--				float = {
--					focusable = false,
--					border = "rounded",
--				},
--			})
--
--			-- On_attach function
--			local on_attach = function(client, bufnr)
--				local buf_map = function(mode, lhs, rhs, opts)
--					opts = vim.tbl_extend("force", { buffer = bufnr }, opts or {})
--					vim.keymap.set(mode, lhs, rhs, opts)
--				end
--
--				-- Key bindings
--				buf_map("n", "gd", vim.lsp.buf.definition, { desc = "Go to Definition" })
--				buf_map("n", "<F2>", vim.lsp.buf.rename, { desc = "Rename Symbol" })
--				vim.keymap.set("n", "<leader>ca", vim.lsp.buf.code_action, { desc = "LSP: Code Action" })
--				vim.keymap.set("n", "<leader>gw", vim.diagnostic.goto_next, { desc = "Go to Next Diagnostic" })
--				vim.keymap.set("n", "<leader>ge", function()
--					vim.diagnostic.goto_next({ severity = vim.diagnostic.severity.ERROR })
--				end, { desc = "Go to Next Error" })
--				-- Format on save
--				if client.server_capabilities.documentFormattingProvider then
--					vim.api.nvim_buf_create_user_command(bufnr, "Format", function()
--						vim.lsp.buf.format({ async = true })
--					end, { desc = "Format document with LSP" })
--
--					vim.cmd([[
--            augroup lsp_format_on_save
--              autocmd! * <buffer>
--              autocmd BufWritePre <buffer> lua vim.lsp.buf.format({ async = true })
--            augroup END
--          ]])
--				end
--			end
--
--			-- Automatically configure installed LSPs from Mason
--			mason_lspconfig.setup_handlers({
--				function(server_name)
--					local opts = {
--						on_attach = on_attach,
--						capabilities = capabilities,
--					}
--
--					if server_name == "lua_ls" then
--						opts.settings = {
--							Lua = {
--								format = { enable = true },
--								diagnostics = { globals = { "vim" } },
--							},
--						}
--					elseif server_name == "rust_analyzer" then
--						opts.settings = {
--							["rust-analyzer"] = {
--								check = { command = "clippy" },
--								formatting = { enable = true },
--								diagnostics = {
--									disabled = { "unresolved-proc-macro", "inactive-code" },
--								},
--							},
--						}
--					elseif server_name == "nil_ls" then
--						opts.settings = {
--							["nil"] = {
--								formatting = {
--									command = { "nixfmt" },
--								},
--							},
--						}
--					elseif server_name == "jedi_language_server" then
--						opts.settings = {
--							python = {
--								analysis = {
--									autoImportCompletions = true,
--									diagnosticMode = "workspace",
--								},
--							},
--						}
--					end
--
--					-- Set up the LSP server with options
--					lspconfig[server_name].setup(opts)
--				end,
--			})
--		end,
--	},
--}
